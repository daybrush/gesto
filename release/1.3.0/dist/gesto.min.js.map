{"version":3,"file":"gesto.min.js","sources":["../src/utils.ts","../src/ClientStore.ts","../src/Gesto.ts","../src/index.umd.ts"],"sourcesContent":["import { Client, Position } from \"./types\";\nimport { IArrayFormat } from \"@daybrush/utils\";\n\nexport function getRad(pos1: number[], pos2: number[]) {\n    const distX = pos2[0] - pos1[0];\n    const distY = pos2[1] - pos1[1];\n    const rad = Math.atan2(distY, distX);\n\n    return rad >= 0 ? rad : rad + Math.PI * 2;\n}\n\nexport function getRotatiion(touches: Client[]) {\n    return getRad([\n        touches[0].clientX,\n        touches[0].clientY,\n    ], [\n        touches[1].clientX,\n        touches[1].clientY,\n    ]) / Math.PI * 180;\n}\n\nexport function isMultiTouch(e: any): e is TouchEvent {\n    return e.touches && e.touches.length >= 2;\n}\nexport function getEventClients(e: any): Client[] {\n    if (e.touches) {\n        return getClients(e.touches);\n    } else {\n        return [getClient(e)];\n    }\n}\nexport function getPosition(clients: Client[], prevClients: Client[], startClients: Client[]): Position {\n    const length = startClients.length;\n    const {\n        clientX, clientY,\n        originalClientX, originalClientY,\n    } = getAverageClient(clients, length);\n    const {\n        clientX: prevX,\n        clientY: prevY,\n    } = getAverageClient(prevClients, length);\n\n    const {\n        clientX: startX,\n        clientY: startY,\n    } = getAverageClient(startClients, length);\n    const deltaX = clientX - prevX;\n    const deltaY = clientY - prevY;\n    const distX = clientX - startX;\n    const distY = clientY - startY;\n\n    return {\n        clientX: originalClientX!,\n        clientY: originalClientY!,\n        deltaX,\n        deltaY,\n        distX,\n        distY,\n    };\n}\nexport function getDist(clients: Client[]) {\n    return Math.sqrt(\n        Math.pow(clients[0].clientX - clients[1].clientX, 2)\n        + Math.pow(clients[0].clientY - clients[1].clientY, 2),\n    );\n}\nexport function getClients(touches: IArrayFormat<Touch>) {\n    const length = Math.min(touches.length, 2);\n    const clients = [];\n\n    for (let i = 0; i < length; ++i) {\n        clients.push(getClient(touches[i]));\n    }\n    return clients;\n}\nexport function getClient(e: MouseEvent | Touch): Client {\n    return {\n        clientX: e.clientX,\n        clientY: e.clientY,\n    };\n}\nexport function getAverageClient(clients: Client[], length = clients.length): Required<Client> {\n    const sumClient: Required<Client> = {\n        clientX: 0,\n        clientY: 0,\n        originalClientX: 0,\n        originalClientY: 0,\n    };\n    for (let i = 0; i < length; ++i) {\n        const client = clients[i];\n\n        sumClient.originalClientX += \"originalClientX\" in client ? client.originalClientX! : client.clientX;\n        sumClient.originalClientY += \"originalClientY\" in client ? client.originalClientY! : client.clientY;\n        sumClient.clientX += client.clientX;\n        sumClient.clientY += client.clientY;\n    }\n    if (!length) {\n        return sumClient;\n    }\n    return {\n        clientX: sumClient.clientX / length,\n        clientY: sumClient.clientY / length,\n        originalClientX: sumClient.originalClientX / length,\n        originalClientY: sumClient.originalClientY / length,\n    };\n}\nexport function plueClient(client1: Client, client2: Client) {\n    return {\n        clientX: (client1.clientX + client2.clientX),\n        clientY: (client1.clientY + client2.clientY),\n    };\n}\n\nexport function minusClient(client1: Client, client2: Client) {\n    return {\n        clientX: (client1.clientX - client2.clientX),\n        clientY: (client1.clientY - client2.clientY),\n    };\n}\n","import { Client } from \"./types\";\nimport { getPosition, getDist, getRotatiion, getAverageClient } from \"./utils\";\n\nexport class ClientStore {\n    public prevClients: Client[] = [];\n    public startClients: Client[] = [];\n    public movement = 0;\n    public length  = 0;\n    constructor(clients: Client[]) {\n        this.startClients = clients;\n        this.prevClients = clients;\n        this.length = clients.length;\n    }\n    public addClients(clients: Client[] = this.prevClients) {\n        const position = this.getPosition(clients);\n        const { deltaX, deltaY } = position;\n\n        this.movement += Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n        this.prevClients = clients;\n\n        return position;\n    }\n    public getAngle(clients: Client[] = this.prevClients) {\n        return getRotatiion(clients);\n    }\n    public getRotation(clients: Client[] = this.prevClients) {\n        return getRotatiion(clients) - getRotatiion(this.startClients);\n    }\n    public getPosition(clients?: Client[]) {\n        return getPosition(clients || this.prevClients, this.prevClients, this.startClients);\n    }\n    public getPositions(clients: Client[] = this.prevClients) {\n        const prevClients = this.prevClients;\n\n        return this.startClients.map((startClient, i) => getPosition([clients[i]], [prevClients[i]], [startClient]));\n    }\n    public getMovement(clients?: Client[]) {\n        const movement = this.movement;\n\n        if (!clients) {\n            return movement;\n        }\n        const currentClient = getAverageClient(clients, this.length);\n        const prevClient = getAverageClient(this.prevClients, this.length);\n        const deltaX = currentClient.clientX - prevClient.clientX;\n        const deltaY = currentClient.clientY - prevClient.clientY;\n\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY) + movement;\n    }\n    public getDistance(clients = this.prevClients) {\n        return getDist(clients);\n    }\n    public getScale(clients = this.prevClients) {\n        return getDist(clients) / getDist(this.startClients);\n    }\n    public move(deltaX: number, deltaY: number) {\n        this.startClients.forEach(client => {\n            client.clientX -= deltaX;\n            client.clientY -= deltaY;\n        });\n        this.prevClients.forEach(client => {\n            client.clientX -= deltaX;\n            client.clientY -= deltaY;\n        });\n    }\n}\n","import { Client, OnDrag, GestoOptions, GestoEvents } from \"./types\";\nimport {\n    getEventClients, isMultiTouch,\n} from \"./utils\";\nimport EventEmitter, { TargetParam } from \"@scena/event-emitter\";\nimport { addEvent, removeEvent, now, IObject } from \"@daybrush/utils\";\nimport { ClientStore } from \"./ClientStore\";\n\nconst INPUT_TAGNAMES = [\"textarea\", \"input\"];\n/**\n * You can set up drag, pinch events in any browser.\n */\nclass Gesto extends EventEmitter<GestoEvents> {\n    public options: GestoOptions = {};\n    private flag = false;\n    private pinchFlag = false;\n    private datas: IObject<any> = {};\n    private isDrag = false;\n    private isPinch = false;\n    private isMouse = false;\n    private isTouch = false;\n    private clientStores: ClientStore[] = [];\n    private targets: Array<Element | Window> = [];\n    private prevTime: number = 0;\n    private doubleFlag: boolean = false;\n\n    /**\n     *\n     */\n    constructor(targets: Array<Element | Window> | Element | Window, options: GestoOptions = {}) {\n        super();\n        const elements = [].concat(targets as any) as Array<Element | Window>;\n        this.options = {\n            checkInput: false,\n            container: elements.length > 1 ? window : elements[0],\n            preventRightClick: true,\n            preventDefault: true,\n            checkWindowBlur: false,\n            pinchThreshold: 0,\n            events: [\"touch\", \"mouse\"],\n            ...options,\n        };\n\n        const { container, events, checkWindowBlur } = this.options;\n\n        this.isTouch = events!.indexOf(\"touch\") > -1;\n        this.isMouse = events!.indexOf(\"mouse\") > -1;\n        this.targets = elements;\n\n        if (this.isMouse) {\n            elements.forEach(el => {\n                addEvent(el, \"mousedown\", this.onDragStart);\n            });\n            addEvent(container!, \"mousemove\", this.onDrag);\n            addEvent(container!, \"mouseup\", this.onDragEnd);\n            addEvent(container!, \"contextmenu\", this.onDragEnd);\n        }\n        if (checkWindowBlur) {\n            addEvent(window, \"blur\", this.onBlur);\n        }\n        if (this.isTouch) {\n            const passive = {\n                passive: false,\n            };\n            elements.forEach(el => {\n                addEvent(el, \"touchstart\", this.onDragStart, passive);\n            });\n            addEvent(container!, \"touchmove\", this.onDrag, passive);\n            addEvent(container!, \"touchend\", this.onDragEnd, passive);\n            addEvent(container!, \"touchcancel\", this.onDragEnd, passive);\n        }\n    }\n    /**\n     * The total moved distance\n     */\n    public getMovement(clients?: Client[]) {\n        return this.getCurrentStore().getMovement(clients) + this.clientStores.slice(1).reduce((prev, cur) => {\n            return prev + cur.movement;\n        },  0);\n    }\n    /**\n     * Whether to drag\n     */\n    public isDragging(): boolean {\n        return this.isDrag;\n    }\n    /**\n     * Whether to start drag\n     */\n    public isFlag(): boolean {\n        return this.flag;\n    }\n    /**\n     * Whether to start pinch\n     */\n    public isPinchFlag() {\n        return this.pinchFlag;\n    }\n        /**\n     * Whether to start double click\n     */\n    public isDoubleFlag() {\n        return this.doubleFlag;\n    }\n    /**\n     * Whether to pinch\n     */\n    public isPinching() {\n        return this.isPinch;\n    }\n\n    /**\n     * If a scroll event occurs, it is corrected by the scroll distance.\n     */\n    public scrollBy(deltaX: number, deltaY: number, e: any, isCallDrag: boolean = true) {\n        if (!this.flag) {\n            return;\n        }\n        this.clientStores[0].move(deltaX, deltaY);\n        isCallDrag && this.onDrag(e, true);\n    }\n    /**\n     * Create a virtual drag event.\n     */\n    public move([deltaX, deltaY]: number[], inputEvent: any): TargetParam<OnDrag> {\n        const store = this.getCurrentStore();\n        const nextClients = store.prevClients;\n\n        return this.moveClients(nextClients.map(({ clientX, clientY }) => {\n            return {\n                clientX: clientX + deltaX,\n                clientY: clientY + deltaY,\n                originalClientX: clientX,\n                originalClientY: clientY,\n            };\n        }), inputEvent, true);\n    }\n    /**\n     * The dragStart event is triggered by an external event.\n     */\n    public triggerDragStart(e: any) {\n        this.onDragStart(e, false);\n    }\n    /**\n     * Set the event data while dragging.\n     */\n    public setEventDatas(datas: IObject<any>) {\n        const currentDatas = this.datas;\n\n        for (const name in datas) {\n            currentDatas[name] = datas[name];\n        }\n        return this;\n    }\n    /**\n     * Set the event data while dragging.\n     */\n    public getEventDatas() {\n        return this.datas;\n    }\n    /**\n     * Unset Gesto\n     */\n    public unset() {\n        const targets = this.targets;\n        const container = this.options.container!;\n\n        this.off();\n        removeEvent(window, \"blur\", this.onBlur);\n        if (this.isMouse) {\n            targets.forEach(target => {\n                removeEvent(target, \"mousedown\", this.onDragStart);\n            });\n            removeEvent(container, \"mousemove\", this.onDrag);\n            removeEvent(container, \"mouseup\", this.onDragEnd);\n            removeEvent(container, \"contextmenu\", this.onDragEnd);\n        }\n        if (this.isTouch) {\n            targets.forEach(target => {\n                removeEvent(target, \"touchstart\", this.onDragStart);\n            });\n            removeEvent(container, \"touchstart\", this.onDragStart);\n            removeEvent(container, \"touchmove\", this.onDrag);\n            removeEvent(container, \"touchend\", this.onDragEnd);\n            removeEvent(container, \"touchcancel\", this.onDragEnd);\n        }\n    }\n    public onDragStart = (e: any, isTrusted = true) => {\n        if (!this.flag && e.cancelable === false) {\n            return;\n        }\n        const { container, pinchOutside, preventRightClick, preventDefault, checkInput } = this.options;\n        const isTouch = this.isTouch;\n        const isDragStart = !this.flag;\n\n        if (isDragStart) {\n            const activeElement = document.activeElement as HTMLElement;\n            const target = e.target as HTMLElement;\n            const tagName = target.tagName.toLowerCase();\n            const hasInput = INPUT_TAGNAMES.indexOf(tagName) > -1;\n            const hasContentEditable = target.isContentEditable;\n\n            if (hasInput || hasContentEditable) {\n                if (checkInput || activeElement === target) {\n                    // force false or already focused.\n                    return false;\n                }\n                if (\n                    activeElement\n                    && hasContentEditable\n                    && activeElement.isContentEditable\n                    && activeElement.contains(target)\n                ) {\n                    return false;\n                }\n            } else if ((preventDefault || e.type === \"touchstart\") && activeElement) {\n                const activeTagName = activeElement.tagName;\n                if (activeElement.isContentEditable || INPUT_TAGNAMES.indexOf(activeTagName) > -1) {\n                    activeElement.blur();\n                }\n            }\n            this.clientStores = [new ClientStore(getEventClients(e))];\n            this.flag = true;\n            this.isDrag = false;\n            this.datas = {};\n\n            if (preventRightClick && (e.which === 3 || e.button === 2)) {\n                this.initDrag();\n                return false;\n            }\n            this.doubleFlag = now() - this.prevTime < 200;\n\n            const result = this.emit(\"dragStart\", {\n                datas: this.datas,\n                inputEvent: e,\n                isTrusted,\n                isDouble: this.doubleFlag,\n                ...this.getCurrentStore().getPosition(),\n            });\n            if (result === false) {\n                this.initDrag();\n            }\n            this.flag && preventDefault && e.preventDefault();\n        }\n        if (!this.flag) {\n            return false;\n        }\n        let timer = 0;\n\n        if (isDragStart && isTouch && pinchOutside) {\n            timer = setTimeout(() => {\n                addEvent(container!, \"touchstart\", this.onDragStart, { passive: false });\n            });\n        }\n        if (!isDragStart && isTouch && pinchOutside) {\n            removeEvent(container!, \"touchstart\", this.onDragStart);\n        }\n        if (this.flag && isMultiTouch(e)) {\n            clearTimeout(timer);\n            if (isDragStart && (e.touches.length !== e.changedTouches.length)) {\n                return;\n            }\n            if (!this.pinchFlag) {\n                this.onPinchStart(e);\n            }\n        }\n\n    }\n    public onDrag = (e: any, isScroll?: boolean) => {\n        if (!this.flag) {\n            return;\n        }\n        const clients = getEventClients(e);\n        const result = this.moveClients(clients, e, false);\n\n        if (this.pinchFlag || result.deltaX || result.deltaY) {\n            this.emit(\"drag\", {\n                ...result,\n                isScroll: !!isScroll,\n                inputEvent: e,\n            });\n        }\n        if (this.pinchFlag) {\n            this.onPinch(e, clients);\n        }\n\n        this.getCurrentStore().addClients(clients);\n    }\n    public onDragEnd = (e?: any) => {\n        if (!this.flag) {\n            return;\n        }\n        const { pinchOutside, container } = this.options;\n        if (this.isTouch && pinchOutside) {\n            removeEvent(container!, \"touchstart\", this.onDragStart);\n        }\n\n        this.flag = false;\n\n        const position = this.getCurrentStore().getPosition();\n\n        const currentTime = now();\n        const isDouble = !this.isDrag && this.doubleFlag;\n\n        this.prevTime = this.isDrag || isDouble ? 0 : currentTime;\n\n        this.emit(\"dragEnd\", {\n            datas: this.datas,\n            isDouble,\n            isDrag: this.isDrag,\n            inputEvent: e,\n            ...position,\n        });\n        if (this.pinchFlag) {\n            this.onPinchEnd(e);\n        }\n        this.clientStores = [];\n    }\n    public onPinchStart(e: TouchEvent) {\n        const { pinchThreshold } = this.options;\n\n        if (this.isDrag && this.getMovement() > pinchThreshold!) {\n            return;\n        }\n        const store = new ClientStore(getEventClients(e));\n\n        this.pinchFlag = true;\n        this.clientStores.splice(0, 0, store);\n\n        const result = this.emit(\"pinchStart\", {\n            datas: this.datas,\n            angle: store.getAngle(),\n            touches: this.getCurrentStore().getPositions(),\n            ...store.getPosition(),\n            inputEvent: e,\n        });\n\n        if (result === false) {\n            this.pinchFlag = false;\n        }\n    }\n    public onPinch(e: TouchEvent, clients: Client[]) {\n        if (!this.flag || !this.pinchFlag || clients.length < 2) {\n            return;\n        }\n\n        const store = this.getCurrentStore();\n        this.isPinch = true;\n\n        this.emit(\"pinch\", {\n            datas: this.datas,\n            movement: this.getMovement(clients),\n            angle: store.getAngle(clients),\n            rotation: store.getRotation(clients),\n            touches: store.getPositions(clients),\n            scale: store.getScale(clients),\n            distance: store.getDistance(clients),\n            ...store.getPosition(clients),\n            inputEvent: e,\n        });\n    }\n    public onPinchEnd(e: TouchEvent) {\n        if (!this.pinchFlag) {\n            return;\n        }\n        const isPinch = this.isPinch;\n\n        this.isPinch = false;\n        this.pinchFlag = false;\n        const store = this.getCurrentStore();\n        this.emit(\"pinchEnd\", {\n            datas: this.datas,\n            isPinch,\n            touches: store.getPositions(),\n            ...store.getPosition(),\n            inputEvent: e,\n        });\n        this.isPinch = false;\n        this.pinchFlag = false;\n    }\n\n    private initDrag() {\n        this.clientStores = [];\n        this.pinchFlag = false;\n        this.doubleFlag = false;\n        this.prevTime = 0;\n        this.flag = false;\n    }\n    private getCurrentStore() {\n        return this.clientStores[0];\n    }\n    private moveClients(clients: Client[], inputEvent: any, isAdd: boolean): TargetParam<OnDrag> {\n        const store = this.getCurrentStore();\n        const position = store[isAdd ? \"addClients\" : \"getPosition\"](clients);\n\n        this.isDrag = true;\n\n        return {\n            datas: this.datas,\n            ...position,\n            movement: this.getMovement(clients),\n            isDrag: this.isDrag,\n            isPinch: this.isPinch,\n            isScroll: false,\n            inputEvent,\n        };\n    }\n    private onBlur = () => {\n        this.onDragEnd();\n    }\n}\n\nexport default Gesto;\n","\nimport Dragger, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Dragger as any)[name] = (modules as any)[name];\n}\n\nexport default Dragger;\n"],"names":["getRotatiion","touches","pos1","pos2","distX","distY","rad","Math","atan2","PI","getRad","clientX","clientY","getEventClients","e","length","min","clients","i","push","getClient","getClients","getPosition","prevClients","startClients","_a","originalClientX","originalClientY","_b","prevX","prevY","_c","deltaX","deltaY","getDist","sqrt","pow","getAverageClient","sumClient","client","this","position","movement","map","startClient","currentClient","prevClient","forEach","INPUT_TAGNAMES","targets","options","_super","_this","isTrusted","flag","cancelable","container","pinchOutside","preventRightClick","preventDefault","checkInput","isTouch","isDragStart","activeElement","document","target","tagName","toLowerCase","hasInput","indexOf","hasContentEditable","isContentEditable","contains","type","activeTagName","blur","clientStores","ClientStore","isDrag","datas","which","button","initDrag","doubleFlag","now","prevTime","emit","inputEvent","isDouble","getCurrentStore","timer","setTimeout","addEvent","onDragStart","passive","removeEvent","isMultiTouch","clearTimeout","changedTouches","pinchFlag","onPinchStart","isScroll","result","moveClients","onPinch","addClients","currentTime","onPinchEnd","onDragEnd","elements","concat","window","checkWindowBlur","pinchThreshold","events","isMouse","el","onDrag","onBlur","passive_1","tslib_1","getMovement","slice","reduce","prev","cur","isPinch","isCallDrag","move","nextClients","currentDatas","name","off","store","splice","angle","getAngle","getPositions","rotation","getRotation","scale","getScale","distance","getDistance","isAdd","EventEmitter","modules","Dragger"],"mappings":"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"}