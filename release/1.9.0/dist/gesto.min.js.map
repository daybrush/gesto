{"version":3,"file":"gesto.min.js","sources":["../src/utils.ts","../src/ClientStore.ts","../src/Gesto.ts","../src/index.umd.ts"],"sourcesContent":["import { Client, Position } from \"./types\";\nimport { IArrayFormat, isNumber } from \"@daybrush/utils\";\n\nexport function getRad(pos1: number[], pos2: number[]) {\n    const distX = pos2[0] - pos1[0];\n    const distY = pos2[1] - pos1[1];\n    const rad = Math.atan2(distY, distX);\n\n    return rad >= 0 ? rad : rad + Math.PI * 2;\n}\n\nexport function getRotatiion(touches: Client[]) {\n    return getRad([\n        touches[0].clientX,\n        touches[0].clientY,\n    ], [\n        touches[1].clientX,\n        touches[1].clientY,\n    ]) / Math.PI * 180;\n}\n\nexport function isMultiTouch(e: any): e is TouchEvent {\n    return e.touches && e.touches.length >= 2;\n}\nexport function getEventClients(e: any): Client[] {\n    if (!e) {\n        return [];\n    } if (e.touches) {\n        return getClients(e.touches);\n    } else {\n        return [getClient(e)];\n    }\n}\nexport function isMouseEvent(e: any): e is MouseEvent {\n    return isNumber(e.button);\n}\nexport function getPosition(clients: Client[], prevClients: Client[], startClients: Client[]): Position {\n    const length = startClients.length;\n    const {\n        clientX, clientY,\n        originalClientX, originalClientY,\n    } = getAverageClient(clients, length);\n    const {\n        clientX: prevX,\n        clientY: prevY,\n    } = getAverageClient(prevClients, length);\n\n    const {\n        clientX: startX,\n        clientY: startY,\n    } = getAverageClient(startClients, length);\n    const deltaX = clientX - prevX;\n    const deltaY = clientY - prevY;\n    const distX = clientX - startX;\n    const distY = clientY - startY;\n\n    return {\n        clientX: originalClientX!,\n        clientY: originalClientY!,\n        deltaX,\n        deltaY,\n        distX,\n        distY,\n    };\n}\nexport function getDist(clients: Client[]) {\n    return Math.sqrt(\n        Math.pow(clients[0].clientX - clients[1].clientX, 2)\n        + Math.pow(clients[0].clientY - clients[1].clientY, 2),\n    );\n}\nexport function getClients(touches: IArrayFormat<Touch>) {\n    const length = Math.min(touches.length, 2);\n    const clients = [];\n\n    for (let i = 0; i < length; ++i) {\n        clients.push(getClient(touches[i]));\n    }\n    return clients;\n}\nexport function getClient(e: MouseEvent | Touch): Client {\n    return {\n        clientX: e.clientX,\n        clientY: e.clientY,\n    };\n}\nexport function getAverageClient(clients: Client[], length = clients.length): Required<Client> {\n    const sumClient: Required<Client> = {\n        clientX: 0,\n        clientY: 0,\n        originalClientX: 0,\n        originalClientY: 0,\n    };\n    for (let i = 0; i < length; ++i) {\n        const client = clients[i];\n\n        sumClient.originalClientX += \"originalClientX\" in client ? client.originalClientX! : client.clientX;\n        sumClient.originalClientY += \"originalClientY\" in client ? client.originalClientY! : client.clientY;\n        sumClient.clientX += client.clientX;\n        sumClient.clientY += client.clientY;\n    }\n    if (!length) {\n        return sumClient;\n    }\n    return {\n        clientX: sumClient.clientX / length,\n        clientY: sumClient.clientY / length,\n        originalClientX: sumClient.originalClientX / length,\n        originalClientY: sumClient.originalClientY / length,\n    };\n}\nexport function plueClient(client1: Client, client2: Client) {\n    return {\n        clientX: (client1.clientX + client2.clientX),\n        clientY: (client1.clientY + client2.clientY),\n    };\n}\n\nexport function minusClient(client1: Client, client2: Client) {\n    return {\n        clientX: (client1.clientX - client2.clientX),\n        clientY: (client1.clientY - client2.clientY),\n    };\n}\n","import { Client } from \"./types\";\nimport { getPosition, getDist, getRotatiion, getAverageClient } from \"./utils\";\n\nexport class ClientStore {\n    public prevClients: Client[] = [];\n    public startClients: Client[] = [];\n    public movement = 0;\n    public length  = 0;\n    constructor(clients: Client[]) {\n        this.startClients = clients;\n        this.prevClients = clients;\n        this.length = clients.length;\n    }\n    public getAngle(clients: Client[] = this.prevClients) {\n        return getRotatiion(clients);\n    }\n    public getRotation(clients: Client[] = this.prevClients) {\n        return getRotatiion(clients) - getRotatiion(this.startClients);\n    }\n    public getPosition(clients: Client[] = this.prevClients, isAdd?: boolean) {\n        const position = getPosition(clients || this.prevClients, this.prevClients, this.startClients);\n\n        const { deltaX, deltaY } = position;\n\n        this.movement += Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n        this.prevClients = clients;\n\n        return position;\n    }\n    public getPositions(clients: Client[] = this.prevClients) {\n        const prevClients = this.prevClients;\n\n        return this.startClients.map((startClient, i) => getPosition([clients[i]], [prevClients[i]], [startClient]));\n    }\n    public getMovement(clients?: Client[]) {\n        const movement = this.movement;\n\n        if (!clients) {\n            return movement;\n        }\n        const currentClient = getAverageClient(clients, this.length);\n        const prevClient = getAverageClient(this.prevClients, this.length);\n        const deltaX = currentClient.clientX - prevClient.clientX;\n        const deltaY = currentClient.clientY - prevClient.clientY;\n\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY) + movement;\n    }\n    public getDistance(clients = this.prevClients) {\n        return getDist(clients);\n    }\n    public getScale(clients = this.prevClients) {\n        return getDist(clients) / getDist(this.startClients);\n    }\n    public move(deltaX: number, deltaY: number) {\n        this.startClients.forEach(client => {\n            client.clientX -= deltaX;\n            client.clientY -= deltaY;\n        });\n    }\n}\n","import { Client, OnDrag, GestoOptions, GestoEvents } from \"./types\";\nimport {\n    getEventClients, isMultiTouch,\n} from \"./utils\";\nimport EventEmitter, { TargetParam } from \"@scena/event-emitter\";\nimport { addEvent, removeEvent, now, IObject } from \"@daybrush/utils\";\nimport { ClientStore } from \"./ClientStore\";\n\nconst INPUT_TAGNAMES = [\"textarea\", \"input\"];\n/**\n * You can set up drag, pinch events in any browser.\n */\nclass Gesto extends EventEmitter<GestoEvents> {\n    public options: GestoOptions = {};\n    private flag = false;\n    private pinchFlag = false;\n    private datas: IObject<any> = {};\n    private isDrag = false;\n    private isPinch = false;\n    private isMouse = false;\n    private isTouch = false;\n    private clientStores: ClientStore[] = [];\n    private targets: Array<Element | Window> = [];\n    private prevTime: number = 0;\n    private doubleFlag: boolean = false;\n    private _dragFlag = false;\n\n    /**\n     *\n     */\n    constructor(targets: Array<Element | Window> | Element | Window, options: GestoOptions = {}) {\n        super();\n        const elements = [].concat(targets as any) as Array<Element | Window>;\n        this.options = {\n            checkInput: false,\n            container: elements.length > 1 ? window : elements[0],\n            preventRightClick: true,\n            preventWheelClick: true,\n            preventDefault: true,\n            checkWindowBlur: false,\n            keepDragging: false,\n            pinchThreshold: 0,\n            events: [\"touch\", \"mouse\"],\n            ...options,\n        };\n\n        const { container, events, checkWindowBlur } = this.options;\n\n        this.isTouch = events!.indexOf(\"touch\") > -1;\n        this.isMouse = events!.indexOf(\"mouse\") > -1;\n        this.targets = elements;\n\n        if (this.isMouse) {\n            elements.forEach(el => {\n                addEvent(el, \"mousedown\", this.onDragStart);\n            });\n            addEvent(container!, \"mousemove\", this.onDrag);\n            addEvent(container!, \"mouseup\", this.onDragEnd);\n            addEvent(container!, \"contextmenu\", this.onDragEnd);\n        }\n        if (checkWindowBlur) {\n            addEvent(window, \"blur\", this.onBlur);\n        }\n        if (this.isTouch) {\n            const passive = {\n                passive: false,\n            };\n            elements.forEach(el => {\n                addEvent(el, \"touchstart\", this.onDragStart, passive);\n            });\n            addEvent(container!, \"touchmove\", this.onDrag, passive);\n            addEvent(container!, \"touchend\", this.onDragEnd, passive);\n            addEvent(container!, \"touchcancel\", this.onDragEnd, passive);\n        }\n    }\n    /**\n     * Stop Gesto's drag events.\n     */\n    public stop() {\n        this.isDrag = false;\n        this.flag = false;\n        this.clientStores = [];\n        this.datas = {};\n    }\n    /**\n     * The total moved distance\n     */\n    public getMovement(clients?: Client[]) {\n        return this.getCurrentStore().getMovement(clients) + this.clientStores.slice(1).reduce((prev, cur) => {\n            return prev + cur.movement;\n        },  0);\n    }\n    /**\n     * Whether to drag\n     */\n    public isDragging(): boolean {\n        return this.isDrag;\n    }\n    /**\n     * Whether to start drag\n     */\n    public isFlag(): boolean {\n        return this.flag;\n    }\n    /**\n     * Whether to start pinch\n     */\n    public isPinchFlag() {\n        return this.pinchFlag;\n    }\n        /**\n     * Whether to start double click\n     */\n    public isDoubleFlag() {\n        return this.doubleFlag;\n    }\n    /**\n     * Whether to pinch\n     */\n    public isPinching() {\n        return this.isPinch;\n    }\n\n    /**\n     * If a scroll event occurs, it is corrected by the scroll distance.\n     */\n    public scrollBy(deltaX: number, deltaY: number, e: any, isCallDrag: boolean = true) {\n        if (!this.flag) {\n            return;\n        }\n        this.clientStores[0].move(deltaX, deltaY);\n        isCallDrag && this.onDrag(e, true);\n    }\n    /**\n     * Create a virtual drag event.\n     */\n    public move([deltaX, deltaY]: number[], inputEvent: any): TargetParam<OnDrag> {\n        const store = this.getCurrentStore();\n        const nextClients = store.prevClients;\n\n        return this.moveClients(nextClients.map(({ clientX, clientY }) => {\n            return {\n                clientX: clientX + deltaX,\n                clientY: clientY + deltaY,\n                originalClientX: clientX,\n                originalClientY: clientY,\n            };\n        }), inputEvent, true);\n    }\n    /**\n     * The dragStart event is triggered by an external event.\n     */\n    public triggerDragStart(e: any) {\n        this.onDragStart(e, false);\n    }\n    /**\n     * Set the event data while dragging.\n     */\n    public setEventDatas(datas: IObject<any>) {\n        const currentDatas = this.datas;\n\n        for (const name in datas) {\n            currentDatas[name] = datas[name];\n        }\n        return this;\n    }\n    /**\n     * Get the current event state while dragging.\n     */\n    public getCurrentEvent(inputEvent?: any) {\n        return {\n            datas: this.datas,\n            ...this._getPosition(),\n            movement: this.getMovement(),\n            isDrag: this.isDrag,\n            isPinch: this.isPinch,\n            isScroll: false,\n            inputEvent,\n        };\n    }\n    /**\n     * Get & Set the event data while dragging.\n     */\n    public getEventDatas() {\n        return this.datas;\n    }\n    /**\n     * Unset Gesto\n     */\n    public unset() {\n        const targets = this.targets;\n        const container = this.options.container!;\n\n        this.off();\n        removeEvent(window, \"blur\", this.onBlur);\n        if (this.isMouse) {\n            targets.forEach(target => {\n                removeEvent(target, \"mousedown\", this.onDragStart);\n            });\n            removeEvent(container, \"mousemove\", this.onDrag);\n            removeEvent(container, \"mouseup\", this.onDragEnd);\n            removeEvent(container, \"contextmenu\", this.onDragEnd);\n        }\n        if (this.isTouch) {\n            targets.forEach(target => {\n                removeEvent(target, \"touchstart\", this.onDragStart);\n            });\n            removeEvent(container, \"touchstart\", this.onDragStart);\n            removeEvent(container, \"touchmove\", this.onDrag);\n            removeEvent(container, \"touchend\", this.onDragEnd);\n            removeEvent(container, \"touchcancel\", this.onDragEnd);\n        }\n    }\n    public onDragStart = (e: any, isTrusted = true) => {\n        if (!this.flag && e.cancelable === false) {\n            return;\n        }\n        const {\n            container,\n            pinchOutside,\n            preventWheelClick,\n            preventRightClick,\n            preventDefault,\n            checkInput,\n        } = this.options;\n        const isTouch = this.isTouch;\n        const isDragStart = !this.flag;\n\n        if (\n            (preventWheelClick && (e.which === 2 || e.button === 1))\n            || (preventRightClick && (e.which === 3 || e.button === 2))\n        ) {\n            this.initDrag();\n            return false;\n        }\n\n        if (isDragStart) {\n            const activeElement = document.activeElement as HTMLElement;\n            const target = e.target as HTMLElement;\n            const tagName = target.tagName.toLowerCase();\n            const hasInput = INPUT_TAGNAMES.indexOf(tagName) > -1;\n            const hasContentEditable = target.isContentEditable;\n\n            if (hasInput || hasContentEditable) {\n                if (checkInput || activeElement === target) {\n                    // force false or already focused.\n                    return false;\n                }\n                // no focus\n                if (\n                    activeElement\n                    && hasContentEditable\n                    && activeElement.isContentEditable\n                    && activeElement.contains(target)\n                ) {\n                    return false;\n                }\n            } else if ((preventDefault || e.type === \"touchstart\") && activeElement) {\n                const activeTagName = activeElement.tagName;\n                if (activeElement.isContentEditable || INPUT_TAGNAMES.indexOf(activeTagName) > -1) {\n                    activeElement.blur();\n                }\n            }\n            this.clientStores = [new ClientStore(getEventClients(e))];\n            this.flag = true;\n            this.isDrag = false;\n            this._dragFlag = true;\n            this.datas = {};\n\n            this.doubleFlag = now() - this.prevTime < 200;\n\n            const result = this.emit(\"dragStart\", {\n                datas: this.datas,\n                inputEvent: e,\n                isTrusted,\n                isDouble: this.doubleFlag,\n                ...this.getCurrentStore().getPosition(),\n                preventDefault() {\n                    e.preventDefault();\n                },\n                preventDrag: () => {\n                    this._dragFlag = false;\n                },\n            });\n            if (result === false) {\n                this.initDrag();\n            }\n            this.flag && preventDefault && e.preventDefault();\n        }\n        if (!this.flag) {\n            return false;\n        }\n        let timer = 0;\n\n        if (isDragStart && isTouch && pinchOutside) {\n            timer = setTimeout(() => {\n                addEvent(container!, \"touchstart\", this.onDragStart, { passive: false });\n            });\n        }\n        if (!isDragStart && isTouch && pinchOutside) {\n            removeEvent(container!, \"touchstart\", this.onDragStart);\n        }\n        if (this.flag && isMultiTouch(e)) {\n            clearTimeout(timer);\n            if (isDragStart && (e.touches.length !== e.changedTouches.length)) {\n                return;\n            }\n            if (!this.pinchFlag) {\n                this.onPinchStart(e);\n            }\n        }\n\n    }\n    public onDrag = (e: any, isScroll?: boolean) => {\n        if (!this.flag) {\n            return;\n        }\n        const clients = getEventClients(e);\n        const result = this.moveClients(clients, e, false);\n\n        if (this._dragFlag) {\n            if (this.pinchFlag || result.deltaX || result.deltaY) {\n                const dragResult = this.emit(\"drag\", {\n                    ...result,\n                    isScroll: !!isScroll,\n                    inputEvent: e,\n                });\n\n                if (dragResult === false) {\n                    this.stop();\n                    return;\n                }\n            }\n            if (this.pinchFlag) {\n                this.onPinch(e, clients);\n            }\n        }\n\n        this.getCurrentStore().getPosition(clients, true);\n    }\n    public onDragEnd = (e?: any) => {\n        if (!this.flag) {\n            return;\n        }\n        const { pinchOutside, container } = this.options;\n        if (this.isTouch && pinchOutside) {\n            removeEvent(container!, \"touchstart\", this.onDragStart);\n        }\n        if (this.pinchFlag) {\n            this.onPinchEnd(e);\n        }\n        const clients = e?.touches ? getEventClients(e) : [];\n        const clientsLength = clients.length;\n\n        if (clientsLength === 0 || !this.options.keepDragging) {\n            this.flag = false;\n        } else {\n            this._addStore(new ClientStore(clients));\n        }\n\n\n        const position = this._getPosition();\n        const currentTime = now();\n        const isDouble = !this.isDrag && this.doubleFlag;\n\n        this.prevTime = this.isDrag || isDouble ? 0 : currentTime;\n\n        if (!this.flag) {\n            this.emit(\"dragEnd\", {\n                datas: this.datas,\n                isDouble,\n                isDrag: this.isDrag,\n                isClick: !this.isDrag,\n                inputEvent: e,\n                ...position,\n            });\n\n            this.clientStores = [];\n        }\n    }\n    public onPinchStart(e: TouchEvent) {\n        const { pinchThreshold } = this.options;\n\n        if (this.isDrag && this.getMovement() > pinchThreshold!) {\n            return;\n        }\n        const store = new ClientStore(getEventClients(e));\n\n        this.pinchFlag = true;\n        this._addStore(store);\n\n        const result = this.emit(\"pinchStart\", {\n            datas: this.datas,\n            angle: store.getAngle(),\n            touches: this.getCurrentStore().getPositions(),\n            ...store.getPosition(),\n            inputEvent: e,\n        });\n\n        if (result === false) {\n            this.pinchFlag = false;\n        }\n    }\n    public onPinch(e: TouchEvent, clients: Client[]) {\n        if (!this.flag || !this.pinchFlag || clients.length < 2) {\n            return;\n        }\n\n        const store = this.getCurrentStore();\n        this.isPinch = true;\n\n        this.emit(\"pinch\", {\n            datas: this.datas,\n            movement: this.getMovement(clients),\n            angle: store.getAngle(clients),\n            rotation: store.getRotation(clients),\n            touches: store.getPositions(clients),\n            scale: store.getScale(clients),\n            distance: store.getDistance(clients),\n            ...store.getPosition(clients),\n            inputEvent: e,\n        });\n    }\n    public onPinchEnd(e: TouchEvent) {\n        if (!this.pinchFlag) {\n            return;\n        }\n        const isPinch = this.isPinch;\n\n        this.isPinch = false;\n        this.pinchFlag = false;\n        const store = this.getCurrentStore();\n        this.emit(\"pinchEnd\", {\n            datas: this.datas,\n            isPinch,\n            touches: store.getPositions(),\n            ...store.getPosition(),\n            inputEvent: e,\n        });\n    }\n\n    private initDrag() {\n        this.clientStores = [];\n        this.pinchFlag = false;\n        this.doubleFlag = false;\n        this.prevTime = 0;\n        this.flag = false;\n    }\n    private getCurrentStore() {\n        return this.clientStores[0];\n    }\n    private moveClients(clients: Client[], inputEvent: any, isAdd: boolean): TargetParam<OnDrag> {\n        const position = this._getPosition(clients, isAdd);\n\n        if (position.deltaX || position.deltaY) {\n            this.isDrag = true;\n        }\n\n        return {\n            datas: this.datas,\n            ...position,\n            movement: this.getMovement(clients),\n            isDrag: this.isDrag,\n            isPinch: this.isPinch,\n            isScroll: false,\n            inputEvent,\n        };\n    }\n    private onBlur = () => {\n        this.onDragEnd();\n    }\n    private _addStore(store: ClientStore) {\n        this.clientStores.splice(0, 0, store);\n    }\n    private _getPosition(clients?: Client[], isAdd?: boolean) {\n        const store = this.getCurrentStore();\n        const position = store.getPosition(clients, isAdd);\n\n        const { distX, distY } = this.clientStores.slice(1).reduce((prev, cur) => {\n            const storePosition = cur.getPosition();\n\n            prev.distX += storePosition.distX;\n            prev.distY += storePosition.distY;\n            return prev;\n        },  position);\n\n        return {\n            ...position,\n            distX,\n            distY,\n        };\n    }\n\n}\n\nexport default Gesto;\n","\nimport Dragger, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Dragger as any)[name] = (modules as any)[name];\n}\n\nexport default Dragger;\n"],"names":["getRotatiion","touches","pos1","pos2","distX","distY","rad","Math","atan2","PI","getRad","clientX","clientY","getEventClients","e","length","min","clients","i","push","getClient","getClients","getPosition","prevClients","startClients","_a","getAverageClient","originalClientX","originalClientY","_b","prevX","prevY","_c","deltaX","deltaY","getDist","sqrt","pow","sumClient","client","this","isAdd","position","movement","map","startClient","currentClient","prevClient","forEach","INPUT_TAGNAMES","targets","options","_super","_this","isTrusted","flag","cancelable","container","pinchOutside","preventWheelClick","preventRightClick","preventDefault","checkInput","isTouch","isDragStart","which","button","initDrag","activeElement","document","target","tagName","toLowerCase","hasInput","indexOf","hasContentEditable","isContentEditable","contains","type","activeTagName","blur","clientStores","ClientStore","isDrag","_dragFlag","datas","doubleFlag","now","prevTime","emit","inputEvent","isDouble","getCurrentStore","preventDrag","timer","setTimeout","addEvent","onDragStart","passive","removeEvent","isMultiTouch","clearTimeout","changedTouches","pinchFlag","onPinchStart","isScroll","result","moveClients","stop","onPinch","onPinchEnd","keepDragging","_addStore","_getPosition","currentTime","isClick","onDragEnd","elements","concat","window","checkWindowBlur","pinchThreshold","events","isMouse","el","onDrag","onBlur","passive_1","__extends","getMovement","slice","reduce","prev","cur","isPinch","isCallDrag","move","nextClients","currentDatas","name","off","store","angle","getAngle","getPositions","rotation","getRotation","scale","getScale","distance","getDistance","splice","storePosition","EventEmitter","modules","Dragger"],"mappings":"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"}